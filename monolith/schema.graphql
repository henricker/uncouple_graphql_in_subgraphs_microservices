type Query {
  ### Listings
  "A curated array of listings to feature on the homepage"
  featuredListings: [Listing!]!
  "Search results for listings that fit the criteria provided"
  searchListings(criteria: SearchListingsInput): [Listing]!
  "Return the listings that belong to the currently logged-in host"
  hostListings: [Listing]!
  "Returns the details about this listing"
  listing(id: ID!): Listing
  "Returns all possible amenities for a listing"
  listingAmenities: [Amenity!]!

  ### Bookings
  "All bookings for the given listing, optionally filtered by a BookingStatus"
  bookingsForListing(listingId: ID!, status: BookingStatus): [Booking]!
  "A list of bookings for the guest - must be authenticated as guest"
  guestBookings: [Booking]!
  "Past bookings for guest based on current date"
  pastGuestBookings: [Booking]!
  "Upcoming and current bookings for guest based on current date"
  upcomingGuestBookings: [Booking]!
  "Current booking for guest based on current date"
  currentGuestBooking: Booking
}

type Mutation {
  ### Listings
  "Creates a new listing for the currently authenticated host"
  createListing(listing: CreateListingInput!): CreateListingResponse!
  "Updates an existing listing"
  updateListing(listingId: ID!, listing: UpdateListingInput!): UpdateListingResponse!

  ### Bookings
  createBooking(createBookingInput: CreateBookingInput): CreateBookingResponse!
}

interface MutationResponse {
  code: Int!
  success: Boolean!
  message: String!
}

#### User accounts

"Represents an Airlock user's common properties"
interface User {
  id: ID!
}

"A host is a type of Airlock user. They own listings."
type Host implements User @key(fields: "id") {
  id: ID!
}

"A guest is a type of Airlock user. They book places to stay."
type Guest implements User @key(fields: "id") {
  id: ID!
}

### Listings

"A listing is a location owned by a host. A listing has a list of amenities it offers. Listings have a fixed cost per night value."
type Listing @key(fields: "id"){
  id: ID!
  title: String!
  description: String!
  photoThumbnail: String!
  numOfBeds: Int!
  costPerNight: Float!
  locationType: LocationType!
  host: Host!
  amenities: [Amenity]!
  bookings: [Booking]!
  numberOfUpcomingBookings: Int!
  currentlyBookedDates: [ReservedDate]!
  totalCost(checkInDate: String!, checkOutDate: String!): Float!
}

"A booking is reserved for a certain date range, marked by the checkInDate and checkOutDate fields"
type ReservedDate {
  "Date the guest checks in"
  checkInDate: String!
  "Date the guest checks out"
  checkOutDate: String!
}

"What the location provides. An amenity should be tied to a specific category."
type Amenity {
  id: ID!
  "The category for the amenity"
  category: AmenityCategory!
  "The name of the amenity. Should be short."
  name: String!
}

"The category an amenity belongs to."
enum AmenityCategory {
  ACCOMMODATION_DETAILS
  SPACE_SURVIVAL
  OUTDOORS
}

"A listing can be one of these types."
enum LocationType {
  SPACESHIP
  HOUSE
  CAMPSITE
  APARTMENT
  ROOM
}

"To search for a listing, you need these fields."
input SearchListingsInput {
  checkInDate: String!
  checkOutDate: String!
  numOfBeds: Int
  page: Int
  limit: Int
  sortBy: SortByCriteria
}

"Listings can be sorted by these options"
enum SortByCriteria {
  COST_ASC
  COST_DESC
}

"Used to create a listing"
input CreateListingInput {
  "The listing's title"
  title: String!
  "The listing's description"
  description: String!
  "The thumbnail image for the listing"
  photoThumbnail: String!
  "The number of beds available"
  numOfBeds: Int!
  "The cost per night"
  costPerNight: Float!
  "The location type of the listing"
  locationType: LocationType!
  "The Listing's amenities "
  amenities: [ID!]!
}

"Updates the properties included. If none are given, don't update anything"
input UpdateListingInput {
  "The listing's title"
  title: String
  "The listing's description"
  description: String
  "The thumbnail image for the listing"
  photoThumbnail: String
  "The number of beds available"
  numOfBeds: Int
  "The cost per night"
  costPerNight: Float
  "The location type of the listing"
  locationType: LocationType
  "The Listing's amenities "
  amenities: [ID]
}

"Response after creating a listing"
type CreateListingResponse implements MutationResponse {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int!
  "Indicates whether the mutation was successful"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
  "The newly created listing"
  listing: Listing
}

"Response after updating a listing"
type UpdateListingResponse implements MutationResponse {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int!
  "Indicates whether the mutation was successful"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
  "The newly updated listing"
  listing: Listing
}

### Bookings

"A booking is a reservation for a specific listing"
type Booking @key(fields: "id"){
  id: ID!
  listing: Listing!
  guest: Guest!
  checkInDate: String!
  checkOutDate: String!
  totalPrice: Float!
  status: BookingStatus!
}

"The status of a booking"
enum BookingStatus {
  CURRENT
  COMPLETED
  UPCOMING
}

"Fields for creating a booking"
input CreateBookingInput {
  "ID of the listing associated with the booking"
  listingId: ID!
  "Date of check-in"
  checkInDate: ID!
  "Date of check-out"
  checkOutDate: ID!
}

"Minimum details needed for a newly created booking"
type NewBookingResponse {
  id: ID!
  checkInDate: String!
  checkOutDate: String!
}

"The response after creating a booking."
type CreateBookingResponse implements MutationResponse {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int!
  "Indicates whether the mutation was successful"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
  "The newly-created booking"
  booking: NewBookingResponse
}

### Reviews
type Review @key(fields: "id"){
  id: ID!
}
